// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  email     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  payers         Expense[]
  expenseMembers ExpenseMember[]
  members        GroupMember[]

  @@map("users")
}

model GroupMember {
  id Int @id @default(autoincrement())

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @map("group_id")
  user    User  @relation(fields: [userId], references: [id])
  userId  Int   @map("user_id")

  @@map("groups_members")
}

model Group {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  members         GroupMember[]
  expenses        Expense[]
  ExpenseCategory ExpenseCategory[]

  @@map("groups")
}

model Expense {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  date        DateTime  @map("date")
  amount      Int
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  group      Group           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId    Int             @map("group_id")
  payer      User            @relation(fields: [paidBy], references: [id])
  paidBy     Int             @map("paid_by_id")
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId Int             @map("category_id")
  members    ExpenseMember[]

  @@map("expenses")
}

model ExpenseCategory {
  id        Int       @id @default(autoincrement())
  name      String
  global    Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  group     Group?    @relation(fields: [groupId], references: [id])
  groupId   Int?      @map("group_id")

  expense Expense[]

  @@map("expenses_categories")
}

model ExpenseMember {
  id      Int     @id @default(autoincrement())
  amount  Int
  hasPaid Boolean @map("has_paid")

  expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId Int     @map("expense_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int     @map("user_id")

  @@map("expenses_members")
}
